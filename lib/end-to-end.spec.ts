import {getOpenApiWriter, getTypeScriptReader, makeConverter} from "../lib";


it('typescript to convert to openapi', async function () {
    // language=TypeScript
    const input = `
    
    type Thing = {
        x: 6
        y: string
    }
        
    export type Foo = {
        a: string
        b: null
        c: number
        d: boolean
        e: Thing
    }
    `

    // language=yaml
    const output = `openapi: 3.0.0
info:
  title: My API
  version: v1
paths: {}
$comment: >-
  Generated by core-types-json-schema
  (https://github.com/grantila/core-types-json-schema) on behalf of typeconv
  (https://github.com/grantila/typeconv)
components:
  schemas:
    Foo:
      properties:
        a:
          type: string
        b:
          nullable: true
        c:
          type: number
        d:
          type: boolean
        e:
          $ref: '#/components/schemas/Thing'
      required:
        - a
        - b
        - c
        - d
        - e
      additionalProperties: false
      type: object
    Thing:
      properties:
        x:
          const: 6
          type: number
        'y':
          type: string
      required:
        - x
        - 'y'
      additionalProperties: false
      type: object
`

    const { convert } = makeConverter( getTypeScriptReader(), getOpenApiWriter({
        format: 'yaml',
        title: 'My API',
        version: 'v1'
    }) );

    const { data } = await convert( { data: input } );

    expect(data).toBe(output)
})
